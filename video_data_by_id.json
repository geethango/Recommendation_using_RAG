{
    "video014": " Flexbox is incredibly powerful because it allows you to justify your content in any way you want. For example, you could have it in the center, you could have it at the end, you could space things out by doing something like space around or space between. And that really allows you to really fine tune how all the elements are laid out from one another. What happens if you want a single element to be spaced out from the rest? Well, this is where automatic margins come in inside of CSS Flexbox. Let's say we want the first child to be on the left and everything else on the right. We can just give this a margin right of auto and now it's going to take all the extra space in the Flexbox container and put it to the right side of this first child. We can do the same thing with the last child. And for example, let's make this the margin left. By doing this, we've essentially taken all the extra space in our Flexbox container and we've assigned it in between the first and second element and the last and second last element to make everything else in the center and the first and last element on the four edges. This is only one of many amazing Flexbox features which are done a full video on you can find in the comments and description.",
    "video015": " If you're avoiding using CSS Grid because you can't be bothered to learn how to use it, I'm going to show you how in two lines of CSS that are perfect for almost every project. Let's be honest, most projects required to think cards are a set height and width in a dashboard, which will change you map items for column based on the browser and wrap over each other like this. In order to do this, all you need to have is a parent container which has a width and a bunch of child elements inside such as these 300x4 just pixel sets. So here I am adding a few and then I'll display Grid to initiate CSS Grid and the line Grid template columns repeat, also fit 300 pixels. So this will set the columns of the grid to repeat automatically based on the parent width, whilst also declaring that each item is 300 pixels in width. And done! If you want to, you can also add a gap around each child element like so and center them in the parent from left to right by using just by content center. You're welcome! Send us a someone who cares and check out my free 12 hour coding course on my YouTube channel.",
    "video013": " CSS selectors in one minute, really? Selectors in one minute? The basic ones. [♪ INTRO MUSIC PLAYING [♪ Selectors are the way you choose which element you want to style. The most basic kind is an element selector. So I have a div here. I'm going to style it. I say div, curly, color, red. Boom, done. Now it's red. Little more specific is an ID selector. Say you have two divs and you want to style one of them. You add an ID to it. ID equals awesome. And in CSS, you say hashtag awesome, color, red. Now only that one div is red. Nice. You can't share IDs, though. So say you have multiple divs and you want some of them to be red more than one of them. Then you use a class selector. Give the class to the elements that you want. Class equals amazing. Then in CSS, you say dot amazing, color, red. Now all of those with the class amazing turn red. Fucking amazing. These are the most basic selectors. Next we'll look at some of the more complex ones. OK, now can you build this? I think you can. See you next time.",
    "video056": " In this video, I want to talk about the two dimensional array. We're going to write int a, I want to name this array a, going to close bracket. I want to say the number of row should be two, and the number of column should be three. I'm going to initial this array. This is our first row, I'm going to write one, two, three. Our first row with three column. And again, this is our second row with three column. Four, five, six. Our array has two row and three column. This is the first row with three column. And this is the second row with three column. So in order to print any element of this two dimensional array, we need to both row and columns. So here, on the right, we have a right person D. So here, we're going to write a row one, on the right, one here. So let's compile and see. As you can see, it printed the void.",
    "video031": "You said never let me goYou said anything about me",
    "video058": " In this video, I want to talk about arrays of the structure. So let's go ahead and check it out. First of all, I want to create a structure. So this is our structure and inside this structure is the three variable, inside the main function. I'm going to create our variable. This is structure, stroke, student, student. It has three elements. Our first array element is Alice 20. The GPA is 3.5. Second element is Bob 19, 3. Charlie 1, 3.4. So I want to create a formula in order to go over this array's element. Let's complete the game. Yeah. Here's the student one. Name is Alice, age is 20, and the GPA is 3.5, and the student two is name Bob 19, and the GPA is 3.9, and the student three name Charlie is 21, and the GPA is 3.5.",
    "video036": "",
    "video060": " In this video, I want to talk about the assignment operator in this language. Whenever a compiler wants to evaluate the variable, it first evaluate the value on the row side of the equal sign and then assign it to the left side of equal sign. So here the compiler evaluate first the number 4 and check it and then assign this third to the x. So if we have x equal to x plus x plus 2, here the compiler will check the number of the row side of the equal sign and then assign that value to the left side of the equal sign.",
    "video037": " F",
    "video054": " The name Malik stands for Memory Allocation. The Malik function reserves a block of memory of the specified number of bytes. And, it returns a pointer of Void type, which can be casted into pointers of any form. Example, I have allocated memory dynamically with the help of Malik for 100 blocks of memory. Each block is having size of 4 bytes. Hence, total of 400 bytes of memory would be allocated. And lastly, pointer type cast is required of integer type.",
    "video055": " Control click on this function. Fiest code will show me where it comes from. This right here is just a declaration. There's no code for this function because this standard IO.h is just a C header file, not a C source file. So where does the code for puts come from? I'll show you with a little library example of my own. This is my header file, core.h, and it has one function here. And if we go to core.c, it writes a function compatible with that declaration. If I just gcc main.c, it's going to say undefined reference to mylib init because no actual code for it. So, ccc, it doesn't know where to find mylib init. It doesn't know that it's in this core.c file. And the way we can include that in our compilation is what many libraries will do is they'll create a library archive. And now I can link against the archives. Compile that on main. Mylib is initialized.",
    "video033": " Music",
    "video030": " music",
    "video034": " How much time does it have? I have had pants whenever I want some clothes. This is for my closet. It's Mondays. These are for me. On Saturday night. We were going to spend days on our clothes in the cell phones. There's one more page now, kind of.",
    "video038": " 3",
    "video032": " Google Play",
    "video053": " Pointers are cool. In C, a pointer stores a memory address of a related type. An in-pointer points to an integer, a char pointer points to a char, etc. This can be useful for passing around data without having to copy all of it. You can get a pointer to some memory by using the ampersand operator like this. You can only use this operator until the underlying data goes out of scope though, so be careful. You can read from or write to the memory the pointer is pointing to by using the star operator on the left side of your variable. You can also get a pointer to some new memory by using Malak. Keep in mind that you now have to free this memory as well when you are done with it or else you look at a memory leak.",
    "video062": " In this video, I want to talk about a real look function. We create a pointer is equal to in malloc, size of integer and multiply by 5. So let's initialize this 5 block of code. Now let's print this 5 block of code. So before we run our program, we have to free our dynamically memory allocated by free function, free array. So let's save for a program and combine it. It's printed 1, 2, 3, 4, 5 for 5 block of RAM. And we want to expand this 5 block of code to 10 block of code. Now we use the real look function. Array, real look array, size of, int, multiply by 10. Again, I'm going to initialize the next 5 block of RAM. Now I'm going to use the next for loop. Let's save for program, compile it and run it. There you go. Here's the first for loop. We allocated the 5 block of RAM with malloc function here. And again here, we expand this 5 block of RAM to 10 block of RAM with this real look function. There you go. There is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. See you next video and bye for now.",
    "video061": " In this video, I want to talk about the scan if. So what is a scan if? The scan if is basically an input function. When we want to get some value from the user, we use the scan if function. So let's see how it works. So I'm going to write here int, px equal to zero. And I write here the scan if I use the placeholder person d because our variable is integer, we use the placeholder person d for integer. And here I use the ampersand x. So why I use the ampersand? We use ampersand here because we want to restore that value at the memory address of x. So it's basically a pointer. So what is a pointer? You will learn the pointer in the next videos. As you get more information, as you get learned the C language more, you will understand the pointer. So right now it doesn't matter to know what is the pointer.",
    "video035": "",
    "video059": " TupDiff is a way of to change the name of a data time. Usually programmers use it in structure and it makes the code clear. So let's create an structure and see how it works. So this is the way that we create an structure. Now if we want to create a variable with this structure, we have to include the keyword, the struct. For example, the struct person and P1. So here we include the word struct. Now here we use the type div and we eliminate this struct keyword. So here before the struct, I want to say type div and I want to call this person and paste it here at the bottom of this structure. Here I want to delete this struct. On this person, you want or I want to say person P2 is equal to Neo 21 and 180.",
    "video057": " In this video we're going to talk about union. In order to create a union we have to use the keyword union I'm going to say union and the name of this union will be sample union and I'm going to open closed color brackets. I insert this color brackets I'm going to say int oi float f in character c and at the bottom of this color brackets I'm going to put silicon and now I'm going to create a variable with this union inside the main function union sample n u u dot i is equal to 10 and u dot f is equal to 3.4 and u dot c is equal to character capital A. I'm going to say i cool in present the bracket slash n and here I can say u dot i print f f cool in rs n f dot 1 back is slash n u dot at print c cool in rs n c black slash n and here I'm going to say u dot c so let's compile and see the output as you can see it printed i is 10 f is 3.4 and c is 8 so this is how we can create a union to sum up a union is the user defined at a time as a fairly similar but it can only serve one value at a time",
    "video039": " Music",
    "video100": " How is exception handling done in Python? In Python, we use the try accept block to handle exceptions. The code that might generate an exception is placed inside the try block. Every try block is followed by an accept block. When an exception occurs, it is caught by the accept block. Some exceptions are syntax error, zero division error, import error etc.",
    "video078": " Exception handling in Java is one of the powerful mechanism to handle the runtime errors. For example, class not-formed exception, input output exception, SQL exception, remote exception, etc. The advantage of exception handling is to maintain the normal flow of the application and exception normally disrupts the normal flow of the application, that is why we need to handle exceptions.",
    "video021": " Fast API makes it really easy to make a rest API service. Let's see how in 30 seconds. First we import Fast API, then declare our app and our first route. This will be our index route. We then declare any function that turns out dictionary, we can then run it with UV cord. UV cord is a web server gateway for Python. We can check our browser and there is the hello world output.",
    "video022": " In Python 4 loops we have the 4 keyword in and we have a colon. Underneath that loop we have some code and we know it's part of that loop because of the gap before that code. In the spaces between 4 and in we have a variable and after in is what we loop through. Here we loop through 0, 1 and 2. Here's a list and we loop through the list we get 1 to 5. Here's a string. We loop through the string and we get each letter in that string. Here's a range. This gives us 0, 1 and 2 and that prints 0, 1 and 2 when we loop through it. Here's 2 for loops. First loop on the outside and an inner loop. When we print the variables from both we get 0, 0, 0, 0, 1, 0, 2 through 2, 2. Okay, thank you for watching. Please like.",
    "video050": " How to use the abbreviation tag in HTML. The abbreviation tag represents an abbreviation or acronym and you can use it in text on your HTML sites. Simply put the abbreviation between the opening and closing abbreviated tags, then you should write the abbreviation in plain text, so the user can understand what it means. Optionally, you can add the title attribute, which must include a full explanation of the abbreviation than nothing else, then add a little bit of CSS, for example, change the font style and the color to emphasize the abbreviation. Now you should see the abbreviation and if you hover over it with the cursor, you will see the title you entered.",
    "video010": " You",
    "video046": " HTML button tag. A button is a clickable element in a user interface that triggers a specific action. It can be used to submit forms, navigate between pages, or execute other functions. Buttons are typically labeled with text or an image to indicate their purpose.",
    "video018": " How to work with Converse API? So let's take a Converse tag and put the ID here, put your width and height here. I've taken 300 and 200 pixels. You can take S by yourself. Then give a style, you can give what a style you want to this canvas. So I've given just a background here. You can see Cyancaller. And then what you need to do is, in your JS, you need to use document.getal.inv. and give the ID which you provided to Converse tag here. Same ID you give it, then you need to create a context. So to create a context, you need to use getContext with 2D as an option. Then you will get the CTX. Then you can use CTX top, begin path. Then you can use move to 00. That is first point here. I've taken 0. You can give any point S by yourself. That's where you'll requirement. Then line up. You can move to the other points according to the points which have given here. It will keep on moving to those points. Okay. Those coordinates, X and Y coordinates. Right. Then I've given stroke, style, black and stroke. I've created here. So you can, there are many functions which you can utilize with the CTX which will help you draw your things in canvas. So explore canvas API. But this is the way how you can utilize canvas API in your HTML and JS.",
    "video047": " Learn Web Development Day 10. Next is HTML entities which is used to create emojis. To create a heart, create a paragraph, an entity starts with ampersand and end with semicolon. So write ampersand heart semicolon. To print a star write paragraph tag, ampersand star semicolon. This is how we use entities.",
    "video048": " The field set tag is an HTML element used to group related form elements within a web page. The field set tag can contain one or more form elements, such as input, label, or select elements, and is often used in combination with the legend tag to provide a label or caption for the group of form elements. The basic syntax for the field set tag is as follows.",
    "video011": " Want to level up your web forms? In this video, I'll show you how to create a simple HTML form with JavaScript validation. We're checking if fields are filled. Email is valid. Phone number is correct. And even if terms are accepted, it's perfect for login, registration, or contact forms. Watch till the end to see how it all works together. No libraries. Just pure JavaScript. Don't forget to like, subscribe, and drop your questions in the comments.",
    "video044": " The IFRAM tag is used to embed another web page or a document within the current HTML document. It stands for Inline Frame and is often used to display content from external sources, such as advertisements, maps, videos, or social media widget. Here is an example of how to use the IFRAM tag. In this example, an embedded Google map is displayed using the IFRAM tag.",
    "video042": " стран",
    "video049": " What is the difference between block level and inline elements in HTML? The block level elements, example div paragraph, start on a new line and take up the full width available, creating a block structure. While the inline elements, example span, a, do not start on a new line and only take up as much width as necessary. Flowing within the surrounding content.",
    "video043": " The NAFTAG is used to define a section of a web page that contains navigation links. It is typically used to group a list of links that are used to navigate between different sections or pages of a website. Here is an example of how the NAFTAG can be used in HTML code. In this example, the NAFTAG is used to group a list of links to different sections of a website, which are displayed in an unordered list with individual list items for each link.",
    "video041": " In HTML we have three types of lists, unordered lists, ordered lists and description lists. Lists are quite like tables in that we have an opening tag and then for every item they have their own tag that's different from the opening tag. Unordered lists start with the UL tag and ordered lists start with the OL tag. Both use the OL tag for items. A description list uses the DL tag to open and DT for each item and then DD for the item descriptions.",
    "video045": " Let's talk about MetaTags. These are HTML elements that decide how your pages appear in the search results. For example, this is called the title tag and it's also the most important tag because it decides whether the user will click through or move on. You will be surprised how a tiny change here can massively impact your click through rate. Another one is MetaDescription which provides additional information about the page to attract more clicks. Think of MetaTags as the outer packaging of your web page. It should be descriptive yet engaging at the same time. These are the top three WordPress plugins to easily manage your MetaTags. Subscribe for more SEO tips.",
    "video051": " Hey Bobby here, I thought I'd tell you how to add an HTML progress bar to your web page. So what we can do is we can just add the progress tag straight from HTML. It's set to values. We can set max equals 100 and then our progress value in this case is going to be 75. The style it we can come up here and just add an accent color. Little coder foundry orange. Now you have a styled progress bar with HTML and CSS.",
    "video052": " Did you know HTML has special elements for quotes and citations that improve readability and CO? For longer quotes use Blockwell. It adds in indentation making it clear that it's quote, see the example code and the difference between the Blockwell to element and the other elements in the output. For short inline quotes use Qtack which automatically adds quotation marks, see the example code and the difference between the Q element and the other elements in the output. Use for citing sources usually in italics. Now see the example code and the output for the site element. The ABBR tag highlights abbreviations and even shows full forms on hover. Try these tags in your code to improve structure and readability. Watch more of our HTML bite-sized short videos and expand your learnings with BMR education.",
    "video012": " The difference between a semantic Putemilb element and an unsomantic one is that the semantic one has meaning that can be read and acted upon by a machine, such as this one programmed by a woman. I might be lovelace. And I programmed the first ever computer. Go cry about it. Baby dick. Laughing my ass off. For example, a computer that encounters an H1 element, knows it represents a first-level heading, and should have an appropriately large bold font style. Semantic Hdml isn't just for adding user agent stars, you never fucking wanted in the first place, and will no doubt override with your own CSS, or sssssssssssssssss. Briefs.video",
    "video040": " interesting background music music music video",
    "video024": " What is name equals equals main in Python? And why do we even write it? Let's explain that with an example. If we have a Python file that contains a function called callme and we call it in the same file, then we import the callme function in another file and run it. We see that the callme function was executed, but we just imported it and didn't intend on calling it. And if we added name equals equals main, it doesn't get executed. So the main purpose of name equals equals main is to avoid running the file code with another module and put something from it. It does that by checking the name variable. The name is a built in variable that has the name of the current Python module. It's always set to main for the first Python module that starts running, also known as top-level code. And this is why if name equals equals main is so important.",
    "video065": " Talking about arrays and an array is a variable that stores multiple values and a single primitive type and each of these values can be accessed by specifying the array name and some index that acts as an offset. So let's see what happens when we change the primitive type here from an int to a car. So here's a car and you might know that this assignment still works and you're thinking like okay well that's an int and it's going into a car variable. What happens here? Well technically what we would have to do is cast it. Okay that will give us a predictable result that says go through the machinery that makes sure that this int gets transformed into the car properly. So whenever we're going from one primitive type to another primitive type we should cast. If you don't cast then the result you get will technically be unpredictable.",
    "video063": " So my first question is what is Java? Java is a general-purpose, class-based, object-oriented programming language. It is among the most-used programming language. Java is also used as a computing platform. It is considered as one of the fast, secure, and reliable programming languages preferred by most organizations to build their projects. It is widely used for developing Java applications in laptops, data centers, game consoles, scientific supercomputers, cell phones, etc. It is used for developing Android apps helps you to create enterprise software, wide range of mobile Java apps, scientific computing applications, Java programming of hardware devices talking about its history. Originally, it was developed for handling portable devices and set-top boxes. In 1995, Sun changed the name to Java from Oak. Later, in 2009, Oracle Corporation acquired Sun Microsystems and took ownership of three-key-sun software assets.",
    "video082": " Why do I need comments? Let's jump inside the system class. We can see here we have this part of the code. We have this part of the code. Hmm. And if we scroll a bit down, we have this part of the code. Well, all of these that I showed you are comments. In Java, you have three types of comments. Documentation, comments, multi-line comments, and single-line comments. Documentation, comments, or document APIs are needed for reference of classes, method, arguments, and so on. Multi-line comments are used to explain a complex code snippet, or to comment multiple lines of code and single-line comments are exactly that. Just comments in a single line. They are probably the most used type of comments.",
    "video069": " A constructor is a special method which has to be invoked with new. In this particular case, I'm creating a file with new file, so calling the constructor, and I have to pass the file name because this is what the constructor expects. So if we take a look at the actual implementation, this is the file which is the constructor, there is no return value because it's always the type of the class. The name has to be the class and it can have parameters in this particular case. Defile remembers the name and the prefix length. So now I have the instance. So now I can call some methods. So let's call the exist method check whether the file exists and what I also would like to do is to create the actual file. So if we run it, the file does not exist first, then it's created and then it exists.",
    "video068": " Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java, primitive data types. The primitive data types include Boolean, Char, Bite, Short, Int, Long, Float and Double, Non-Primitive Data Types. The non-Primitive data types include classes, interfaces, and arrays.",
    "video079": " Let's talk about collection hierarchy. Iterable interface is at the top of it, implementing this interface allows an object to be the target of the for each loop statement. Collection interface, a collection represents a group of objects known as its elements. This interface is typically used to pass collections around and manipulate them where maximum generality is desired. Set interface, set is a collection that contains no duplicate elements. Hashset class implements the set interface and it is backed by a hash table. Limp hashset class, this implementation differs from hashset by maintaining insertion ordering. Soited set interface is set that further provides an ordering on its elements. 3 set class, the elements in this set are ordered using their natural ordering or by a comparator.",
    "video083": " I would like to read a file into strings. The name of the file is message.text and let's read it. For that, I need a files and a method. Class files on the method is read a string and what I have to pass is the path of. The name of the file is message.text and what I also have to do is to throw an exception. Then I get the content bank. So now with the content, I would like to print it out and this basically it. So now compile the code and to run it. And the content is helloDuke which matches the content of the file.",
    "video080": " In Java, Access Modifiers control the visibility of class members, including fields and methods. There are four types of Access Modifiers, Private, Default or Package Private, Protected and Public. Private is the most restrictive Access Modifier. Members declared as Private are only accessible within the same class. They cannot be accessed by other classes, even if they are in the same package. This is useful for encapsulating data and preventing external classes from directly modifying it. On the other hand, members declared as protected are accessible within the same class. It's subclasses and other classes in the same package. This allows for inheritance and controlled access between related classes. It's often used for implementing inheritance hierarchies, where subclasses need to access or modify members of the superclass. The default modifier or Package Private is selected when no explicit modifier is specified. Members declared as Package Private are accessible within the same package, but not outside of it. This provides a middle ground between Private and Protected, allowing for access within the same package, but restricting it from other packages. Finally, the least restrictive Access Modifier is Public. Members declared as Public are accessible from anywhere in the program. They can be accessed by any class, regardless of Package. This is commonly used for Public APIs when classes and members need to be accessible to external users. So, to recap, Private members are accessible only within the same class. Protected members are accessible within the same class, it's subclasses and other classes in the same package. Package Private members are accessible within the same package, and Public members are accessible from anywhere in the program. Check out the full video pinned in the comments section.",
    "video064": " What are Java operators? Java operators are special symbols that perform operations on one, two, or three operands. They are essential for manipulating data and variables, allowing developers to create complex expressions and algorithms in their programs.",
    "video081": " Now in Java we do jar and var but the thing is in this jar file will you put all the classes as a one folder? That's not a good case right because if you want to search for it it will be difficult for search and also Maybe someone else is building a project and you want to give your project as a library what you can do is you can create multiple folders Depend upon their users example. Let's say there are few classes which connects with database You can put them in a DB folder you have few classes which are utility classes You can put that in a utility folder every folder here is called a package and the beauty is You can have a folder inside a folder that is package inside a package So let's say we have a class called DB connection and this DB connection file belongs to a DB folder Now this DB folder belongs to your project name let's say demo and this demo project belongs to telescope Com so what I can do is I can have a unique package name for the particular class So I can say com dot telescope dot demo dot DB dot DB connection. I'm making sure my library is unique throughout the world You know how because I own telescope com So you can just reverse your domain name and you can have that library",
    "video066": " I have here an in-am answer with yes and no and what I would like to do is to use the new shiny switch statement in Java pattern matching switch to print custom cases and cases custom output. So first I'm with yes and with the yes and now I use the just the arrow I can say system of print line and plus for yes and then for no is of course a minus no I do the no with minus and this should already do the job so let's try it Java app or Java and I see a minus if I change to yes I should see the plus and I see the plus.",
    "video067": " What is typecasting in Java? In Java, typecasting is a method or process that converts a data type into another data type. There are two types of typecasting, widening typecasting and narrowing typecasting. Converting a lower data type into a higher one is called widening typecasting. It is also known as implicit conversion. Converting a higher data type into a lower one is called narrowing typecasting. It is also known as explicit conversion.",
    "video071": " Java programming variables, variable. Variable is a container that holds data that can change during the execution of a program. It is a memory location with a name, a data type and a value. Variables are used to store data like integers, floating point, numbers, characters and more. Declaration of variables. In Java, a variable is declared with a specific data type and name. The declaration tells the compiler about the type of data the variable will hold and allocates memory for that data. Syntax, data type variable name. Example, int age, declaring a variable age of type int. Variable initialization.",
    "video008": " JavaScript error functions in one minute. ERA Functions are the new cuter way to write functions. So say const say hi equals function, it receives a and b, and it returns a says hi to b. Get rid of the function and add an error between the parentheses and the curly's, and you got yourself an error function. If you only have one parameter, you can kill the parentheses too, and if all your function does is return some value, you can get rid of the curly's and even the return keyword. It's cute, I give you that, but a few problems. First, you can only do this to anonymous functions, so no named functions, including constructors, can be errors. And a bigger problem is error functions don't automatically bind the value of this, which is a big feature of functions in JavaScript. There are four types of functions that you should never write as an error function, which I can't fit into one minute. Full explanation of those four types and the reason behind it over here on YouTube.",
    "video089": " Async await is a nicer, cleaner way of handling promises. Okay, so what does that mean? When you have a function that returns a promise, you can handle the promise using a then and a cash block. Or it would be much nicer if you could just assign the return value to a variable as if it was synchronous. Well, you can. The trick is you have to tell JavaScript that this is an async operation. Otherwise, JavaScript runs top to bottom. It will just move on and your result variable will be appending promise, incomplete, a fugazi, a fugazi. It's not what you want. So how do I tell JavaScript to slow the f*** down? You put a weight in front of the function invocation and the invocation itself has to be inside a function that's marked async. You can use a weight without async, but hold that thought for a second. This tells JavaScript to treat this function as if it has async stuff happening inside. It's the difference between this, a simple straightforward looking code and this f***ing show. And we can handle errors using tricatch with three distinct benefits, which I explained in the full video linked below. Plus how to use a weight without async.",
    "video096": " 5th is Bitwise operators. In JavaScript Bitwise operators are used to manipulate the individual bits of integer values. These operators treat their operands as a series of 32 bits, which is 0 and 1, 1st is Bitwise and it is denoted by single ampersand. It compare each bit of first operands with corresponding bit of second operands. For this, let r equals 5 and b equals 3, these are two decimal number, but when we compare these by bitwise in operator, it directly compare on the binary representations of the numbers. Here the binary form of number 5 is 0, 1, 0, 1 and binary form of number 3 is 0, 0, 1, 1. Then compare by bitwise in 1 with 1 and return 1 because both operands are true. 0 with 1 and return 0 because 1 operand is false. 1 with 0 and return 0 because 1 operand is false. 0 with 0 and return 0 because both operand is false. So that the return 0, 0, 0, 1 and the decimal form of this number is 1 so that it return 1.",
    "video085": " Closure is a function having access to the scope of its parent function after the parent function has returned. In this example, parent function defines a variable named coins, and it returns an anonymous function. Note that it doesn't call the anonymous function, it just returns it. This is useful because a closure is created when the parent function returns. And that's when the anonymous function it returns takes a snapshot of the parent function scope. This means the parent can give both a son and a daughter three coins for the arcade. Note that each function, both son and daughter, took a snapshot of the coins value when they were created. When the son uses all three of his coins, the daughter still has her coins. After the daughter uses a coin, the son tries again, but he's still out, and the daughter still has coins left. This is due to the separate closures created for the son and daughter functions. So just to review...",
    "video092": " What is the difference between debounce and throttle? Let's see debounce with an example. If I move the mouse over the striker area, then it will start to fire the events. You'll see all the events over here and the debounce events below. You can see that only after the events were stopped, then the debounce event was fired after delay. Here is another example. This will pop out the balls if I click on the button. With a debounce you can see that only after I stop the clicks then the balls pop out. Debounce ensures that the function is only called after the function invitation stops and a certain time has elapsed. It is very useful in optimizing the search bar and auto complete. Now let's see an example of throttle. Here the throttle events were fired only once in a specific time frame and they don't wait for the event to be stopped unlike the debounce. Here is another example where you can see that the speed of the button clicks is much faster than the speed of balls popping out. Throttle is useful in the straw or the window resize event when you want the function to be only executed once in a certain time frame. This was another video of the JavaScript interview series. Subscribe to the channel to stay tuned.",
    "video007": " When the browser first loads code like this, the browser engine reads the HTML code and creates something called a document object model or DOM for short. The DOM is a tree like structure that represents the HTML code of the page, a bit like a family tree. The browser turns each HTML element into something called a DOM node. DOM nodes have properties and methods that allow us to manipulate them using JavaScript. Let's say I wanted to interact with this P DOM node over here. I can select it using document.query selector, change the text, change the color, and even add eventlessness. Any changes made to DOM nodes will immediately reflect on the web page. This allows for dynamic content changes. As you can see, the text, the color, and the font weight of this p tag has been changed using JavaScript with the methods provided by the DOM. If I click on this text, you can see it changes again.",
    "video093": " Let's understand Event Delegation. Event Delegation is a pattern in JavaScript to handle the events more efficiently. So if I have multiple elements inside the parent element and we want to listen the events on each children, we can add an event listener on the parent instead of each child and due to event bubbling, the children events will be captured at the parent. Let's understand this with a code example. So we have a parent dev here and inside it, there are three buttons. Now we will attach the event listener on the parent dev as we are using event delegation. So as you can see, we have three buttons on the browser and if I click on a button, it is being detected in the event listener attached to the parent. This is how event delegation works. Please hit the like button if you find the video useful and thanks for watching.",
    "video084": " JavaScript is single threaded. It can only handle one task at a time. We can use web APIs to interact with the features leveraged by the browser. And some of these APIs allow us to initiate async tasks in the background. So the function call that initiates an async task like that is still added to the call stack, but this is just to hand it off to the browser. The actual async task is handled in the background, so it does not block the call stack. The task queue is used by callbackbased web APIs to incule the callback once the asyncriness task has completed. Then we have the micro task queue, which is only used by promise handlers, the async function bodies after awaits, the queue micro task queue callbacks, and the new mutation observer callbacks. This queue has priority over the task queue. And the event loop ensures that this queue is entirely empty before moving on to the task queue. And after handling each task from the task queue, the event loop again checks the micro task queue to ensure that nothing has been added in the meantime.",
    "video020": " Fetch is a native JavaScript function you can call to make it to be requests. You know, the thing that the whole internet is based on. Wait, what the fuck is native? It means you don't have to install a package or import anything. You can just say, fetch. If you're making a simple get request, all you gotta do is pass the URL to the function and JavaScript will do the rest. Cool, how do I pass parameters? You build them into the URL as URL parameters like this. Great, how do I add headers? Remember I said it takes a URL string? That's actually a shorthand for a request object. So create a request object and add all your headers to the headers prompt. Or method if you want to make it a post instead of a get. If you don't do any of that and just pass in a string, it assumes you're making a simple get request with no special configs. You can see a request go out in the browser dev tools under the network tab. So that's what it takes. What does it return? Good question. It returns a promise that will resolve into a response object, including status and results and stuff that you can turn into a JSON object. How to do that with more examples and error handling in the full video linked below. Fetch better, have my money. See you later.",
    "video095": " Generators in JavaScript, let's check it out in next 60 seconds. Generators are the super heroes of JavaScript. They are capable of creating iPrival objects that can be paused and resumed at any point. They bring a new level of flexibility and control to our code. Let's explore the concept of generator with a simple example. In this example, we define a generator function called id generator with a function star syntax that indicates that it's a generator function. Inside the function, we initialize a variable id with a value of 1 and then we enter into an infinite loop using a while true and on each iteration, we yield the current value of id and in the next step, we increment the id. When we create an instance of the generator, using the cons generator is equal to id generator, we can now iterate over it using the next method. Each time we call the next method, the generator, pause it execution and return an object with a value. As you can see here, in the first next.value, we return 1 and in the next, we return 2 and the next 2.",
    "video086": " Let's try to understand what is hoisting in JavaScript in short. JavaScript default behavior moves all declarations of JavaScript to the top, which means you can use a variable throughout the program and declare it at the bottom of the program. Let's say you have used a variable A throughout the program and you've declared it in the end that's still not a concern in JavaScript because JavaScript's default behavior moves the declaration of this variable A to the top.",
    "video088": " JavaScript provides built-in data structures called map and set that help you manage data more efficiently. Let's learn how they work. First, let's talk about map. A map is a collection of key value pairs similar to an object, but with more flexibility. Unlike regular objects, map allows any data type as keys. To create a map, we use new map. Let's create a map named user roles, which will store users and their roles. Next, we use the .set method to add key value pairs. For example, we assign admin to Alice, editor to Bob and viewer to Charlie. We can access a value using .get, calling user roles.get.alice returns admin. We can also check if a key exists using .has and .size tells us the number of entries in the map. To go through all entries, we use .for each, which gives us both the key and the value. Now, let's look at set. A set is a collection that stores unique values. This means duplicate values are automatically removed. To create a set, we use new set and pass in an array of values. Let's create a set named unique numbers with some numbers, including duplicates. JavaScript automatically removes the duplicates, leaving only unique numbers. We can add new values using .add, check if a value exists with .has, and get the total number of items using .size. Just like map, we can loop through a set using .for each dot. Both map and set make it easier to work with key value pairs and unique data in JavaScript, helping us write cleaner and more efficient code.",
    "video009": " Every function in JavaScript has to return something, even if it's undefined. Like, does get the other function, it returns sunny. But sometimes your function doesn't have the thing that it needs to return, like if it has to call an API to get the weather first. So you can't do this. Why? Because call API will actually take time. It's asynchronous. So this function actually doesn't return the weather. It doesn't work. The good news is it can return the promise of the weather instead, like this. It says, hold my br while I go get the weather. There are two parts to any promise. The promise creator, like our function, and the promise receiver, which is whoever calls our function. What's cool about promises is that the receiver can say, oh, I see, you need some time to go get the data. When you're ready, call this function and I'm putting in the then block and send me the data through that. But also if you run into any issues, call this other function that I'm putting in the catch block. But so how does the creator call those functions? Remember the promise object? It takes a function with two parameters. You get that then and catch, except we call them resolve and reject. Now you can do your async operation and call resolve or reject when you're ready. Cool stuff. There's a lot more to promises that can't jam into one minute. Watch a full episode below.",
    "video091": " Ever wondered how objects in JavaScript inherit properties and behavior from each other? Well, it's all about prototypes and inheritance. In JavaScript, objects can directly inherit from other objects through a prototype chain. Constructor functions help create objects with shared prototypes, while object.create. Method allows you to specify prototype objects. Inheritance is achieved by setting up the prototype chain, where objects inherit properties and methods. By setting one constructor functions prototype to be an instance of another, you establish inheritance. So, next time you create objects in JavaScript, remember the power of prototypes and inheritance for structuring your code efficiently.",
    "video017": " Explain me like I'm five, Riyadh Chase. Riyadh Chase is a library built for JavaScript, which allows you to say what you want to do instead of doing it. What do I mean by that? If you have a cook in the house, you tell them what you want to be made today. You don't go ahead and tell them this should be the amount of sugar, this should be the amount of water that should go, this should be the amount of spice that should go and so on. Similarly, in JavaScript, if you're writing JavaScript, you have to define every single thing. What needs to be done, what needs to go where and so on. Riyadh is a declarative library. That means you just need to tell Riyadh. Here's my placeholder, here's my state, and I'm gonna update my state. Riyadh would automatically take care of all the updates which you see on the screen. That means you just tell Riyadh what you want to do, how it has been done that is handled by Riyadh itself.",
    "video087": " What is difference between spread operator and rest operator in JavaScript? Rest operator. The rest operator collects multiple elements into a single array or object. It is used in function parameters to gather all remaining arguments into an array and in array and object destructuring to collect the rest of the elements. Spread operator. The spread operator expands an array or object into individual elements. It is used to spread elements in function called array literals and object literals. Don't...",
    "video094": " Have you heard about the concept of template literals in JavaScript? Template literals allow you to embed variables by declaring a string with backticks. Then you can use the dollar sign and curly braces to insert any variable you want, allowing you to build more dynamic strings.",
    "video090": " Hey everyone, and welcome to this quick tutorial on the try, catch, and finally statement in JavaScript. This powerful tool helps you handle errors gracefully, ensuring your code doesn't crash unexpectedly. Let's start by setting up a basic try catch block. We use try to enclose the code that might throw an error. In this case, we're attempting to divide 10 by 0, which will result in infinity in JavaScript and does not result in an error. The console.log within the try block will output this result. The catch block is where we handle any errors that occur in the try block. The error object gives us information about what went wrong. Here we'll simply log a message to the console if an error happens. In the end, the finally block. This is the magic of try catch finally. The code inside the finally block always executes, regardless of whether an error was thrown or caught. When we run this, you'll see infinity logged first from the try block. Followed by, this will always execute from the finally block. Notice the catch block wasn't executed because there wasn't an error in the traditional sense. Now let's introduce a real error to see the catch block in action. I'll declare a variable called variable, but leave it undefined. Now in the try block, let's try to access a property of this undefined variable. This will generate an error. If you're coding along, try this with different kinds of errors to see how they are reported in the error message. When we run this, notice we get the error message from the catch block, indicating that variable is undefined. Followed by the message from the finally block. So the try catch finally gives you a robust way to handle potential problems, gracefully report errors, and ensure some clean up or final actions always take place. Thanks for watching. Don't forget to subscribe for more JavaScript tips and tricks.",
    "video006": " Declarating variables is a way to create a place in the computer's memory where we can store a value or information. We can do this by using the keywords let or const, but allows us to create a variable that we can change later on, while const creates a variable that cannot be changed once it is set. For example, if we wanted to create a variable called name that stores our name, we could do this by saying let name equals john or const name equals john. The difference is that with let we could later change the value of name to be something else. Next, the value of name would always remain john and java script. A scope is a way to define where a particular variable or function can be access. There are two types of scopes global and local. A global scope is available everywhere in your code. If you create a variable in the global scope, it can be accessed and used by any other code in your program. A local scope is only available within a specific block of code. For example, if you create a variable inside a function, it will only be available within that function and not outside of it. Scopes are important because they allow us to control how and where our variables and functions are used.",
    "video025": " What is lambda in Python? Let's say you really need to figure out what 1 plus 2 is, so you need to create a Python script to do this for you. Sure, you can type print 1 plus 2, but what's the fun in that? Let's instead build a function to do it for us. Let's call it add with an input of x and y, next let's return x plus y. So let's try this function with an input of 1 and 2, and everything works. Except this takes up three whole lines of code. What a waste of space. Let's instead use a lambda function. Lambda functions are the same as regular functions like up here, except they're typically only used in one use cases. It's denoted by typing lambda, and after lambda, we give it its input arguments x and y, just like our add function up here, we'll do colon, and then we write a one line expression, and this case is just x plus y, which is what gets returned. No need to type the return keyword. This all gets enclosed in parentheses, and then our inputs 1 and 2 go here in parentheses. So let's run this, and there we go.",
    "video070": " Want to make your Java code cleaner and more efficient? Lambda expressions are here to save the day. Lambda expressions bring functional programming into Java, allowing for cleaner, more efficient code. They're a game changer for your coding interviews. So what are they? Simply put, Lambda expressions let you write short, single method expressions perfect for simplifying code, especially when dealing with collections or passing behavior as parameters. Here's the syntax parameters. Dive, expression, or code block. This lets you define functions on the go. Lambda's work with functional interfaces like run-able comparator or custom single method interfaces. They cut down on boilerplate code replacing bulky anonymous classes, for example, to sort a list of names in reverse order, use a Lambda like this. It's that simple and clean. Lambda's make Java more flexible and improved readability, crucial for coding efficiency and mailing your interview. Mastering Lambda expressions can simplify your Java code and is a valuable skill for coding interviews. If this helped you understand Lambda's better, hit like and subscribe for more Java insights.",
    "video076": " What are the different types of loops in Java? So, this is a very fresh level question. Java provides three types of loop for Y and DuVild. For more such videos, be subscribed to codifywithsonal.",
    "video026": " Modules versus packages versus libraries. What is the difference? Well, a module contains collections of functions and global variables. So random would be considered a module. A package, on the other hand, is a simple directory that has a collection of modules. And it also contains an initializer.py. So this would be a package. And in general, you import modules from packages. So import sample package dot sample module. A library is a collection of related modules. So requests is a very popular library. And it contains plenty of modules.",
    "video075": " which stands for object oriented programming. And the most important word here is object. Because seeing real world, everything is object, right? Whatever you use. Example if I want to type something, I need a keyboard. If I want to move a cursor, I need a mouse. If I want to write something, I need a pen. In the same way, if you talk about this, this is an object, right? Now who creates this object? Of course, the factory, who manufactures this object. The thing is, if you go to a factory by saying, Hey, you know, I want a keyboard. The factory will say, okay, I will give you the keyboards. Of course, it will manufacture in the factory. But for that, you have to provide them with a design. Now in the programming world, especially in Java, we use classes to design something. So basically, to create the object, you need a class first. Okay. So class is a design, also called as a blueprint. And then what you get from that is an object. Now in our case, in Java case, what is a factory here? Now, that's your JVM, who is responsible to give you the objects. So what you need to do is, you need to give a class and JVM will give you the object.",
    "video072": " Difference between method overloading and method overriding in Java Overloading occurs within the same class Overriding occurs between superclass and subclass Inheritance is not involved in overloading Inheritance is involved in overriding In overloading return type need not be the same In overriding return type must be the same Parameters must be different when we do overloading Parameters must be the same in overriding Static polymorphism can be achieved using overloading Dynamic polymorphism can be achieved using overriding",
    "video027": " Let's talk about Python native types in one minute. Let's start with integers. Integers are whole numbers in Python like 10 or minus 5. And if you check the type of this number 1, we are going to see its integer. Now, floats. Floats are decimal numbers, such as 3.14, I will say type, number 2. Python easily handles arithmetic operations between these two, and we will get 13.14. Trings are sequences of characters, and closed in quotes like text is going to be, Python is great. And when I call the type on this, it's a string. Great. Now, lastly, bullies. Bullies are truth values. They can either take true or false. Like we can say, is Python good? And we can assign true to it. Then we can check type is Python good, and we will get bullies. So these are the fundamental data types in Python. Thanks for watching. You can check my channel for free data science courses and projects. Subscribe for more.",
    "video019": " It's day 84 of learning Python in today's video. I'm going to show you how to connect to an API. The first step is to import requests in JSON. Next, you create a variable called response and set that equal to request.get. And inside the parentheses, you put the API you want to connect to. For this example, I'm using a free cat API. Next, we need to make sure that we connected to the API successfully. We can do this by saying if response.statuscode equals 200. Next, you create a variable called data and set that equal to JSON.loads. And in parentheses, put response.text. For this API, data returns a list and then a dictionary containing all the information in that dictionary. For this example, let's say we only want to get the URL information. What we could do is set image URL equal to data zero. We do that because it's the first item in the list that data returns. And in the next bracket, we put URL because that's where the URL for the picture is stored. When I print image URL and run the code, you see we only get the URL. And when I click on that link, you see we get a picture of a cute cat. If you want to learn more Python, like it subscribe because I post Python tutorial videos every single day.",
    "video005": " What are decorators or wrappers in Python? Let's say we have two very simple functions here called do this and do that. And we're calling them down here. Now I'm going to create a function up here called my decorator, which takes in a function as an input. Inside of here, I'm going to create an inner function called wrapper. Inside of wrapper, we're going to execute the function that's passed in by adding these parentheses. Then from the my decorator function, I'll return wrapper. So now I can add the at symbol with my decorator above each of these functions. I thought sees this at symbol and knows that there's a function called my decorator somewhere, and it's going to pass these functions underneath into it. So when these functions are executed, they're actually going to be passed into my decorator and get executed up here. We can add some functionality to our wrapper, like a log. For example, let's print running funk.dundername here. Then after the function executes, let's say that it completed. This is a very rudimentary example just to demonstrate, but decorators can be used to time functions, create input output caches, and much more.",
    "video099": " Did you know this function in Python dictionary? By default, dictionaries in Python do not have a defined order for their keys. However, if you need to sort the keys of a dictionary in a specific order, you can use the sorted function along with the key parameter. Let's say we have a dictionary representing the ages of people. If we want to sort the keys of this dictionary in alphabetical order, we can use the sorted function. Inside the sorted function, we will pass the ages.key. What this will do is, it will sort the all the key in the dictionary. And then let's use the for loop to print the sorted key and value pair. So you can see that all the keys are now sorted in alphabetical order.",
    "video028": " In Python, we have two ways that we can read and work with a file. One is using the conventional open and close method, and the other is using the Pythonic with method. So conventionally, we would open the file in read mode, we would read the data from the file, and we would process it however we like. Then we will use that data, and we can even use it after, of course, we've created this variable here, so it is usable later. Then we have to make sure that we close the file to make sure there are no memory leaks. And that this file does not remain open for no reason. The problem with this approach here is that if we're doing something with the file and something unsuccessful happens, the file will not close because we will not be able to reach this line of code. Now the Pythonic way to do this is to call with open file in read mode as file, and then inside that block, we're going to read the data and print the data. Now in any case, if something goes wrong, this block will automatically close the file for us without us having to resort to closing the file.",
    "video016": " What is Floss? Floss is a micro web backend framework on Python. It is used to create multi pages website and backend. Why we use Floss? There is some props and cons. This is a easy framework for developers. It has no big file structure like Django. It contains just a file. It is third most popular backend framework for web development. There is some cons. Floss is a small unit development platform. It has not only various. It uses third party library. It is written on Python.",
    "video003": " you you",
    "video002": " One of the most useful things you can learn as an intermediate Python student is comprehension. List Comprehension looks something like this. Imagine we had a list of names, Tom, Cat, and Bob. Now imagine we wanted to grab just the first letter of each of these names. We can do so with list comprehension. Believe it or not, this code is identical to the result that you would get from this code here. Let's break down list comprehension step by step. First, we have our list of names, Tom, Bob, and Cat. Now we're going to use list comprehension. In this case, we're creating an object called L, and it's going to grab the first letter of each of these names. First, we create our object L. This is where we're going to start creating a list that's going to be populated by our comprehension. The comprehension segment comes right here. First, we open up a list just as we normally would. Next, we're going to grab the first index for each thing that we're going to iterate over, in this case, N. And then the second component of list comprehension is a standard for loop. And if you print this off, we get the exact result that we would expect, the first letter of each name.",
    "video001": " You can print hello world 100 times into lines that watch me bang bang",
    "video004": " Ready to learn how to create simple Python classes in just a few seconds? Let's go to create a simple class in Python. Start with the class keyword followed by the class name. In this example, we are defining a top class with the class attribute species. Next, add the init method to initialize the instance attributes. In our example, e-stock has a name and age. Classes help you organize your code, create reusable components, and model real-world objects. They make your code more readable, maintainable, and scalable. To create instances of the dog class, call the class name with the required argument. In this case, we are creating two dogs, buddy and max with the respective ages, three and five. And remember, classes can also have methods to perform actions or calculate values. Add methods to your class to make it more powerful in versatile.",
    "video097": " Now I'm going to declare a list 1 which contains 1, 2, 3, 4 and 5. Decommit it check whether the 5 is present within the list 1.",
    "video023": " In this video, let us learn to create some cool graphics using Python Turtle. Please drop a like and subscribe for similar videos.",
    "video029": " What happens when a function calls itself in Python? You'll see here inside the function factorial, we're calling factorial. This is called recursion. If we want to take the factorial of n, it's just n times n minus 1, all the way down to 1, which is considered the base case. But until we satisfy this base case, we have to keep multiplying n times n minus 1. But...",
    "video073": " What's a recursive function? Many programming beginners ask this question. I'm gonna show you right now.",
    "video074": " String Functions in Java. Starts with Function checks if the string starts with the specified prefix. And returns the output as true or false. Here is an example of Starts with Function. String STR is equal to Hello World. Boolean Starts with is equal to STR. Starts with Hello. The output will be true because the string starts with Hello. For more YouTube shorts follow DevBook. Happy coding.",
    "video077": " Why string is immutable? When we create a new string, it gets stored in a string constant pull and the reference is set to the variable. If we are creating the same string again, JV will not create the string in the string constant pull. JV will refer the existing string to new variable. In this way, we can have multiple reference variable pointing towards the same string. If any of the variable max any change in the string, it will affect all other variables. So to make string more secure and reliable, it is made immutable.",
    "video098": " Typecasting technique in Python. In our previous videos, we discuss about the typecasting technique in which we see the conversion of different type of value into int, float, bull and complex type. In this video, we will see the last conversion that is string type. String function is used to convert one type of values into string type. Let's first convert the int values into string type. If we convert the 100 which is int type into string type, then you can see we are getting 100 as the string type and same is true for float type value. If we convert 10.5 into string type, then the output that we get is 10.5, but as the string type. Now if we convert the bull type into string type, which means if we try to convert true into string type, then you can see we are getting true as the string type and it is also same for the complex type. If we try to convert 5 plus 10j, which is complex type value into string type, we get 5 plus 10j as the string type value. So this is all about the typecasting technique. From next video, we will continue with the data type in Python."
}